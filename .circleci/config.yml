# -- templates --------------

aliases:
  - &attach_workspace
      attach_workspace:
        at: .

  - &store_deb_artifacts
      store_artifacts:
        path: "*.deb"

  - &store_rpm_artifacts
      store_artifacts:
        path: "*.rpm"

  - &store_test_results
      store_test_results:
        path: test-reports

  - &store_test_artifacts
      store_artifacts:
        path: test-reports

  - &install
      run:
        name: Install tarball
        command: python -m pip install $(echo dqsegdb2*.tar.*)[test]

  - &build-debian
      run:
        name: Build
        command: |
          set -x;
          if [[ "${PYTHON_VERSION:0:1}" -eq 3 ]]; then PYTHON3="3"; fi
          apt-get -yqq update;
          apt-get -yqq install \
              dpkg-dev \
              devscripts \
              python${PYTHON3}-pip \
          ;
          pushd $(mktemp -d -p .);
          tar -xf ../dqsegdb2-*.tar.* --strip-components=1;
          # install build dependencies
          mk-build-deps --tool "apt-get -y" --install --remove;
          # build binary package
          dpkg-buildpackage -us -uc -b;
          # mv and install
          popd;
          rm -rf tmp*;
          dpkg --install python*dqsegdb2*.deb;

  - &build-centos
      run:
        name: Build
        command: |
          set -x;
          yum -y -q update;
          if [[ "${PYTHON_VERSION:0:1}" -eq 2 ]]; then PYXY="2"; else PYXY=${PY3XY}; fi
          yum -y -q install \
              rpm-build \
              yum-utils \
              python \
              python2-rpm-macros \
              python${PY3XY} \
              python3-rpm-macros \
              python${PYXY}-pip \
          ;
          # build src rpm
          SRPM=$(rpmbuild --define "_topdir $(pwd)" -ts ./dqsegdb2-*.tar.* | cut -d\  -f2);
          # install build dependencies
          yum-builddep -y -q ${SRPM};
          # build binary rpm(s)
          rpmbuild --define "_rpmdir $(pwd)" --rebuild ${SRPM};
          # install
          mv noarch/*.rpm .;
          yum -y -q --nogpgcheck localinstall ./python*dqsegdb2*.rpm;

  - &test
      run:
        name: Test
        command: |
          set -x;
          mkdir -pv test-reports;
          python${PYTHON_VERSION} -m pip install --upgrade pytest pytest-cov;
          python${PYTHON_VERSION} -m pytest --pyargs dqsegdb2 --cov=dqsegdb2 --junitxml=test-reports/junit.xml;

  - &codecov
      run:
        name: Submit coverage to codecov
        command: |
          # get OS name from CIRCLE_JOB name (ignore if in a python image)
          export IMAGE=$(python${PYTHON_VERSION} -c "print('${CIRCLE_JOB}'.split(':')[-2])")
          if [[ "${IMAGE}" == "python" ]]; then unset IMAGE; fi
          # install codecov
          python${PYTHON_VERSION} -m pip install codecov
          # upload coverage
          python${PYTHON_VERSION} -m codecov --flags $(uname) python${PYTHON_VERSION/./} ${IMAGE}

  - &debian
      steps:
        - *attach_workspace
        - *build-debian
        - *test
        - *codecov
        - *store_test_results
        - *store_test_artifacts
        - *store_deb_artifacts

  - &centos
      steps:
        - *attach_workspace
        - *build-centos
        - *test
        - *codecov
        - *store_test_results
        - *store_test_artifacts
        - *store_rpm_artifacts

  - &python
      steps:
        - *attach_workspace
        - *install
        - *test
        - *codecov
        - *store_test_results
        - *store_test_artifacts

# -- jobs -------------------

version: 2
jobs:
  sdist:
    docker:
      - image: python
    steps:
      - checkout
      - run:
          name: Build tarball
          command: python setup.py --quiet sdist --dist-dir .
      - persist_to_workspace:
          root: .
          paths:
            - "dqsegdb2-*.tar.gz"

  flake8:
    docker:
      - image: python
    steps:
      - checkout
      - run:
          name: Lint
          command: |
            set -ex;
            python -m pip install "flake8>=3.7.0";
            mkdir -pv test-reports;
            python -m flake8 --output-file test-reports/flake8.txt;
      - run:
          name: Create flake8 report
          when: always
          command: |
            set -ex;
            python -m pip install flake8-junit-report;
            python -m junit_conversor test-reports/flake8.txt test-reports/junit.xml;
      - *store_test_results
      - *store_test_artifacts

  debian:stretch:2.7:
    <<: *debian
    docker:
      - image: ligo/base:stretch
    environment:
      PYTHON_VERSION: "2.7"

  debian:stretch:3.5:
    <<: *debian
    docker:
      - image: ligo/base:stretch
    environment:
      PYTHON_VERSION: "3.5"

  el7:2.7:
    <<: *centos
    docker:
      - image: ligo/base:el7
    environment:
      PYTHON_VERSION: "2.7"
      PY3XY: "34"

  python:2.7:
    <<: *python
    docker:
      - image: python:2.7
    environment:
      PYTHON_VERSION: "2.7"

  python:3.6:
    <<: *python
    docker:
      - image: python:3.6
    environment:
      PYTHON_VERSION: "3.6"

  python:3.7:
    <<: *python
    docker:
      - image: python:3.7
    environment:
      PYTHON_VERSION: "3.7"

  sphinx:
    docker:
      - image: python
    steps:
      - checkout
      - run:
          name: Install
          command: python -m pip install .[docs]
      - run:
          name: Run sphinx-build
          command: python setup.py build_sphinx -W

# -- workflow ---------------

workflows:
  version: 2
  build_and_test:
    jobs:
      - sdist
      - flake8
      - debian:stretch:2.7:
          requires:
            - sdist
      - debian:stretch:3.5:
          requires:
            - sdist
      - el7:2.7:
          requires:
            - sdist
      - python:2.7:
          requires:
            - sdist
      - python:3.6:
          requires:
            - sdist
      - python:3.7:
          requires:
            - sdist
      - sphinx
